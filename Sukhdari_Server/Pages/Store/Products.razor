@page "/products"
@layout StoreAdminLayout
@inject IStoreRepo Store
@inject ICategoryRepo Category
@inject IProductRepo Product
@inject NavigationManager Navigator
@attribute [Authorize]

<div class="row">
    <h2 class="col-10">All Products</h2>
    <a class="btn btn-dark col mr-4 h2" href="/addProduct">Add Product</a>
</div>

<div class="table-responsive mt-2">
    <table class="table">
        <caption>List of All Products</caption>
        <thead class="thead-dark">
            <tr>
                <th scope="col">Name</th>
                <th scope="col">Category</th>
                <th scope="col">Price (PKR)</th>
                @*<th scope="col">Discount %</th>
                    <th scope="col">Weight (kg)</th>*@
                <th scope="col">Quantity</th>
                <th scope="col">Description</th>
                <th scope="col">Action</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var product in AllProducts)
            {


                <tr>
                    <td>@product.Name</td>
                    <td>@getProductCategoryName(@product.CategoryId)</td>
                    <td>@product.Price</td>
                    @*<td>0</td>
                        <td>2</td>*@
                    <td>@product.Quantity</td>
                    <td>@product.Description</td>
                    <td class="d-flex align-items-center justify-content-center  flex-column flex-md-row">
                        <a href="@($"/product/update/{product.Id}")"><span class="oi oi-eye"></span></a>
                        <a href="@($"product/delete/{product.Id}")" class="ml-2"><span class="oi oi-trash"></span></a>
                    </td>
                </tr>
            }

        </tbody>
    </table>
</div>

@code {
    [CascadingParameter]
    public Task<AuthenticationState> AuthenticationState { get; set; }

    public IEnumerable<ProductDTO> AllProducts { get; set; }
    public IEnumerable<CategoryDTO> AllCategories { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationState;

        var store = Store.GetStoreByAdminName(authState.User.Identity.Name);

        if (Store.GetStoreByAdminName(authState.User.Identity.Name) == null)
        {
            Navigator.NavigateTo("/storeNotExist");
        }
        else
        {
            AllCategories = await Category.GetAllCategories(store.Id);

            if (!(AllCategories.Any()))
            {
                Navigator.NavigateTo("/addCategory");
            }

            AllProducts = await Product.getAllProducts(store.Id);
        }
    }


    private string getProductCategoryName(int id)
    {
        return AllCategories.FirstOrDefault(i => i.Id == id).Name;
    }
}
