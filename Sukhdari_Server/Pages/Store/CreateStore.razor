@page "/createStore"
@page "/details"
@layout StoreAdminLayoutT
@inject IStoreRepo Store
@inject NavigationManager Navigator

@attribute [Authorize]

<h3>@Title</h3>
<EditForm Model="StoreDetails" OnValidSubmit="CreateStoreWithDTO" class="form-horizontal">
    <DataAnnotationsValidator></DataAnnotationsValidator>

    <div class="form-group">
        <label class="col-md-7 control-label" for="store_name">STORE NAME</label>
        <div class="col-md-7 d-flex flex-row">
            <InputText @bind-Value="StoreDetails.Name" @oninput="CheckStoreAvailability" id="store_name" name="store_name" placeholder="STORE NAME" class="@(StoreAvailability?"form-control input-md is-valid":"form-control input-md  is-invalid")" />

            @*@if (StoreAvailability)
                {
                    <span class="oi oi-check" style="color:green" )></span>

                }
                else
                {
                    <span class="oi oi-warning" style="color:red" )></span>

                }*@
            <ValidationMessage For="()=>StoreDetails.Name"></ValidationMessage>
        </div>
    </div>
    <div class="form-group">
        <label class="col-md-7 control-label" for="store_type">STORE TYPE</label>
        <div class="col-md-7">
            <InputText @bind-Value="StoreDetails.Type" id="store_type" name="store_type" placeholder="e.g. Technology,General" class="form-control input-md" />
            <ValidationMessage For="()=>StoreDetails.Type"></ValidationMessage>

        </div>
    </div>
    <div class="form-group">
        <label class="col-md-7 control-label" for="store_type">Country</label>
        <div class="col-md-7">
            <InputText @bind-Value="StoreDetails.Country" id="store_type" name="store_type" placeholder="Pakistan" class="form-control input-md" />
            <ValidationMessage For="()=>StoreDetails.Country"></ValidationMessage>

        </div>
    </div>
    <div class="col-md-7">
        <button type="submit" disabled="@ShowButton" class="btn btn-dark text-white">@SubmitBtnTxt</button>
    </div>
</EditForm>

@code {
    public string Title = "Create Store";
    public string SubmitBtnTxt = "Please Create Store";
    public bool StoreAvailability { get; set; } = true;
    public bool ShowButton { get; set; } = false;

    [CascadingParameter]
    public Task<AuthenticationState> AuthenticationState { get; set; }

    private StoreDTO StoreDetails { get; set; } = new StoreDTO();

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationState;
        StoreDetails.AdminName = authState.User.Identity.Name;
        if (Store.GetStoreByAdminName(StoreDetails.AdminName) != null)
        {
            Title = "Store Details";
            BtnTxt = "Update Details";
            StoreDetails = Store.GetStoreByAdminName(StoreDetails.AdminName);
        }

        //StoreDetails.StoreName=
        //if (!authenticationState.User.)
        //{
        //    var uri = new Uri(NavigationManager.Uri);
        //    NavigationManager.NavigateTo($"/identity/account/login?returnUrl={uri.LocalPath}");
        //}
    }
    private async void CreateStoreWithDTO()
    {

        var result = await Store.createStore(StoreDetails);
        Navigator.NavigateTo("/store/dashboard");


    }


    protected async Task CheckStoreAvailability(ChangeEventArgs e)
    {
        var result = Store.GetStoreByName(Convert.ToString(e.Value));
        if (result == null)
        {
            StoreAvailability = true;
            ShowButton = false;

        }
        else
        {
            StoreAvailability = false;
            ShowButton = true;
        }
    }
}
