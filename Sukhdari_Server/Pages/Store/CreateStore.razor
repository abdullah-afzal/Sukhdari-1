@page "/createStore"
@page "/details"
@layout StoreAdminLayoutT
@inject IStoreRepo Store
@inject NavigationManager Navigator
@using System.IO
@using Sukhdari_Server.Service.IService
@inject IImageUpload imageUplaod
@inject IStoreImageRepo storeImageRepo
@attribute [Authorize]

<h3>Create Store</h3>
<EditForm Model="StoreDetails" OnValidSubmit="CreateStoreWithDTO" class="form-horizontal">
    <DataAnnotationsValidator></DataAnnotationsValidator>

    <div class="form-group">
        <label class="col-md-7 control-label" for="store_name">STORE NAME</label>
        <div class="col-md-7 d-flex flex-row">
            <InputText @bind-Value="StoreDetails.Name" @oninput="CheckStoreAvailability" id="store_name" name="store_name" placeholder="STORE NAME" class="@(StoreAvailability?"form-control input-md is-valid":"form-control input-md  is-invalid")" />

            @*@if (StoreAvailability)
                {
                    <span class="oi oi-check" style="color:green" )></span>

                }
                else
                {
                    <span class="oi oi-warning" style="color:red" )></span>

                }*@
            <ValidationMessage For="()=>StoreDetails.Name"></ValidationMessage>
        </div>
    </div>
    <div class="form-group">
        <label class="col-md-7 control-label" for="store_type">STORE TYPE</label>
        <div class="col-md-7">
            <InputText @bind-Value="StoreDetails.Type" id="store_type" name="store_type" placeholder="e.g. Technology,General" class="form-control input-md" />
            <ValidationMessage For="()=>StoreDetails.Type"></ValidationMessage>

        </div>
    </div>
    <div class="form-group">
        <label class="col-md-7 control-label" for="store_type">Country</label>
        <div class="col-md-7">
            <InputText @bind-Value="StoreDetails.Country" id="store_type" name="store_type" placeholder="Pakistan" class="form-control input-md" />
            <ValidationMessage For="()=>StoreDetails.Country"></ValidationMessage>

        </div>
    </div>
    <div class="form-group">
        <InputFile OnChange="HandleImageUpload" multiple></InputFile>
        <div class="row">
            @if (StoreDetails.ImageUrls != null && StoreDetails.ImageUrls.Count > 0)
            {
                int no = 1;
                foreach (var image in StoreDetails.ImageUrls)
                {
                    <div class="col-md-3 mt-3">
                        <div style="object-fit: cover;">
                            <span class="badge badge-danger">@no</span>
                            <img src="@image" alt="Store Image" style="width: 5rem;height: 5rem;object-fit: cover;">
                        </div>


                        @*<button type="button" @onclick="()=>DeleteImage(image)"
                                    class="btn btn-danger mt-1">
                                <i class="oi oi-trash"></i>
                            </button>*@
                    </div>
                    no += 1;
                }
            }
        </div>
    </div>
    <div class="col-md-7">
        <button type="submit" disabled="@ShowButton" class="btn btn-dark text-white">Please Create Store</button>
    </div>
</EditForm>

@code {

    public bool StoreAvailability { get; set; } = true;
    public bool ShowButton { get; set; } = false;
    private StoreImageDTO StoreImage { get; set; } = new StoreImageDTO();


    [CascadingParameter]
    public Task<AuthenticationState> AuthenticationState { get; set; }

    private StoreDTO StoreDetails { get; set; } = new StoreDTO();

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationState;
        StoreDetails.AdminName = authState.User.Identity.Name;

        //StoreDetails.StoreName=
        //if (!authenticationState.User.)
        //{
        //    var uri = new Uri(NavigationManager.Uri);
        //    NavigationManager.NavigateTo($"/identity/account/login?returnUrl={uri.LocalPath}");
        //}
    }
    private async Task AddStoreImage(StoreDTO store)
    {
        foreach (var image in StoreDetails.ImageUrls)
        {
            if (StoreDetails.StoreImages == null || StoreDetails.StoreImages.Where(x => x.StoreImageUrl == image).Count()
            == 0)

            {
                StoreImage = new StoreImageDTO()
                {
                    StoreId = store.Id,
                    StoreImageUrl = image
                };
                await storeImageRepo.CreateStoreImage(StoreImage);
            }
        }
    }
    private async void CreateStoreWithDTO()
    {

        var newStore = await Store.createStore(StoreDetails);
        await AddStoreImage(newStore);
        StoreDetails = new StoreDTO();
        StateHasChanged();
        Navigator.NavigateTo("/store/dashboard");

        //var result = await Store.createStore(StoreDetails);
        //Navigator.NavigateTo("/store/dashboard");


    }
    private async Task HandleImageUpload(InputFileChangeEventArgs e)
    {
        try
        {
            var images = new List<string>();
            if (e.GetMultipleFiles().Count > 0)
            {
                foreach (var image in e.GetMultipleFiles())
                {
                    FileInfo imageInfo = new FileInfo(image.Name);
                    if (imageInfo.Extension.ToLower() == ".jpg" ||
                    imageInfo.Extension.ToLower() == ".png" ||
                    imageInfo.Extension.ToLower() == ".jpeg")
                    {
                        var uploadedImagePath = await imageUplaod.uploadImage(image);
                        images.Add(uploadedImagePath);
                    }
                    else
                    {
                        return;
                    }
                }


                if (images.Any())
                {
                    if (StoreDetails.ImageUrls != null && StoreDetails.ImageUrls.Any())
                    {
                        StoreDetails.ImageUrls.AddRange(images);
                    }
                    else
                    {
                        StoreDetails.ImageUrls = new List<string>();
                        StoreDetails.ImageUrls.AddRange(images);
                    }
                }
                else
                {
                    return;
                }
            }
        }
        catch (Exception)
        {
            throw;
        }
    }



    protected async Task CheckStoreAvailability(ChangeEventArgs e)
    {
        var result = Store.GetStoreByName(Convert.ToString(e.Value));
        if (result == null)
        {
            StoreAvailability = true;
            ShowButton = false;

        }
        else
        {
            StoreAvailability = false;
            ShowButton = true;
        }
    }
}
