@page "/addProduct"
@page "/product/update/{Id:int}"
@page "/product/delete/{Id:int}"
@inject IStoreRepo Store
@inject ICategoryRepo Category
@inject IProductRepo Product

@inject NavigationManager Navigator
@layout StoreAdminLayout
@attribute [Authorize]

<h1>@Title</h1>

@if (Id != null)
{
    <div class="top-row d-flex justify-content-end">
        <button @onclick="DeleteProduct" class="btn btn-dark text-white"><span class="oi oi-trash mr-0 mr-md-2" /><h5 class="d-md-inline-block d-none pt-1">Delete Product</h5></button>

    </div>
}

<EditForm Model="ProductDetails" OnValidSubmit="SaveProduct" class="form-horizontal">
    <DataAnnotationsValidator></DataAnnotationsValidator>


    <div class="form-group">
        <label class="col-md-7 control-label" for="product_name">PRODUCT NAME</label>
        <div class="col-md-7">
            <InputText @bind-Value="ProductDetails.Name" placeholder="PRODUCT NAME" class="form-control input-md" />
            <ValidationMessage For="()=>ProductDetails.Name"></ValidationMessage>

        </div>
    </div>


    <div class="form-group">
        <label class="col-md-7 control-label" for="product_categorie">PRODUCT CATEGORY</label>
        <div class="col-md-7">
            <InputSelect @bind-Value="ProductDetails.CategoryId" class="form-control">
                @foreach (var category in Categories)
                {
                    <option value="@category.Id">@category.Name</option>
                }
            </InputSelect>
            <ValidationMessage For="()=>ProductDetails.CategoryId"></ValidationMessage>

        </div>
    </div>

    <div class="form-group">
        <label class="col-md-7 control-label" for="price">PRICE</label>
        <div class="col-md-7">
            <InputNumber @bind-Value="ProductDetails.Price" placeholder="Price" class="form-control input-md" />
            <ValidationMessage For="()=>ProductDetails.Price"></ValidationMessage>

        </div>
    </div>

    <div class="form-group">
        <label class="col-md-7 control-label" for="available_quantity">AVAILABLE QUANTITY</label>
        <div class="col-md-7">
            <InputNumber @bind-Value="ProductDetails.Quantity" placeholder="AVAILABLE QUANTITY" class="form-control input-md" />
            <ValidationMessage For="()=>ProductDetails.Quantity"></ValidationMessage>

        </div>
    </div>

    <div class="form-group">
        <label class="col-md-7 control-label" for="product_description">PRODUCT DESCRIPTION</label>
        <div class="col-md-7">
            <InputTextArea @bind-Value="ProductDetails.Description" class="form-control" name="product_description"></InputTextArea>
            <ValidationMessage For="()=>ProductDetails.Description"></ValidationMessage>

        </div>
    </div>

    @*<div class="form-group">
            <label class="col-md-7 control-label" for="percentage_discount">PERCENTAGE DISCOUNT</label>
            <div class="col-md-7">
                <InputNumber id="percentage_discount" name="percentage_discount" placeholder="PERCENTAGE DISCOUNT" class="form-control input-md" required="" type="text">

            </div>
        </div>

        <div class="form-group">
            <label class="col-md-7 control-label" for="product_tag">PRODUCT SEARCH TAGS</label>
            <div class="col-md-7">
                <textarea class="form-control" id="product_tag" name="product_tag"></textarea>
            </div>
        </div>*@

    @*<div class="form-group">
            <label class="col-md-7 control-label" for="filebutton">IMAGE</label>
            <div class="col-md-7">
                <input id="filebutton" name="filebutton" class="input-file" type="file">
            </div>
        </div>*@

    <div class="form-group">
        <div class="col-md-7">
            <button type="submit" class="btn btn-dark">@btnName</button>
        </div>
    </div>
</EditForm>

@code {
    private string Title { get; set; } = "Add Product";
    private string btnName { get; set; } = "Add Product";
    [Parameter]
    public int? Id { get; set; }

    [CascadingParameter]
    public Task<AuthenticationState> AuthenticationState { get; set; }

    public ProductDTO ProductDetails { get; set; } = new ProductDTO();
    public IEnumerable<CategoryDTO> Categories { get; set; }
    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationState;

        var store = Store.GetStoreByAdminName(authState.User.Identity.Name);
        if (store == null)
        {
            Navigator.NavigateTo("/storeNotExist");
        }
        else
        {
            ProductDetails.StoreId = store.Id;

            Categories = await Category.GetAllCategories(store.Id);

            if (!authState.User.IsInRole(Common.StaticDetails.Role_StoreAdmin))
            {
                var uri = new Uri(Navigator.Uri);
                Navigator.NavigateTo($"/identity/account/login?returnUrl={uri.LocalPath}");
            }
            if (Id != null)
            {
                //updating
                Title = "Update Product";
                btnName = "Update Product";
                var product = await Product.GetProduct(Id.Value, ProductDetails.StoreId);
                ProductDetails = product;
            }
        }
    }

    private async void SaveProduct()
    {

        await Product.createProduct(ProductDetails);
        ProductDetails = new ProductDTO();
        StateHasChanged();
        Navigator.NavigateTo("/products");
    }

    private async void DeleteProduct()
    {
        await Product.deleteProduct(Id.Value);
        StateHasChanged();
        Navigator.NavigateTo("/products");

    }
}
