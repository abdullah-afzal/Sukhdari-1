@page "/addCategory"
@layout StoreAdminLayout
@inject IStoreRepo Store
@inject ICategoryRepo Category
@inject NavigationManager Navigator
@attribute [Authorize]

<h1>Add Category</h1>

<EditForm Model="CategoryDetails" OnValidSubmit="SaveCategory" class="form-horizontal">

    <DataAnnotationsValidator></DataAnnotationsValidator>
    <div class="form-group">
        <label class="col-md-7 control-label" for="category_name">CATEGORY NAME</label>
        <div class="col-md-7">
            <InputText @bind-Value="CategoryDetails.Name" placeholder="Category Name" class="form-control input-md" />
            <ValidationMessage For="()=>CategoryDetails.Name"></ValidationMessage>

        </div>
    </div>



    <div class="form-group">
        <label class="col-md-7 control-label" for="category_description">CATEGORY DESCRIPTION</label>
        <div class="col-md-7">
            <InputTextArea @bind-Value="CategoryDetails.Description" class="form-control" />
            <ValidationMessage For="()=>CategoryDetails.Description"></ValidationMessage>

        </div>
    </div>

    <div class="form-group">
        <div class="col-md-7">
            <button type="submit" class="btn btn-dark text-white">Please Add Category</button>
        </div>
    </div>
</EditForm>

@code {

    [CascadingParameter]
    public Task<AuthenticationState> AuthenticationState { get; set; }

    public CategoryDTO CategoryDetails { get; set; } = new CategoryDTO();

    public String StoreName { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationState;

        var store = Store.GetStoreByAdminName(authState.User.Identity.Name);
        if (store== null)
        {
            Navigator.NavigateTo("/storeNotExist");
        }
        else
        {
            CategoryDetails.StoreId = store.Id;
        }

    }
    private async void SaveCategory()
    {

        await Category.createCategory(CategoryDetails);
    }
}
