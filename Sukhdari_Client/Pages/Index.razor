@page "/"
@layout HomeLayout
@inject IStoreService Store

<div class="container p-3">
    <div class="row justify-content-center">
        <div class="col-8">
            <form action="#" method="get" id="searchForm" class="input-group">
                @* change with edit form when get model same with inside fields *@

                <div class="input-group-btn search-panel">
                    <select @bind="@selectedFilter" name="search_param" id="search_param" class="btn btn-default shadow-none ">
                        <option value="Store">Store</option>
                        <option value="All">All</option>
                        <option value="Category">Category</option>
                        <option value="Product">Product</option>
                    </select>
                </div>
                <input @bind-value="SearchTerm" @bind-value:event="oninput" @onkeyup="@searchResults" type="text" class="form-control col-xl-7 shadow-none" placeholder="Search term...">
                <span class="input-group-btn">
                    @*<button class="btn btn-dark shadow-none" type="submit">
                        <span class="oi oi-magnifying-glass"></span>
                    </button>*@
                </span>
            </form>
        </div>
    </div>
</div>


<div class="form-inline justify-content-center mt-4">

    @if (Stores != null && Stores.Any())
    {
        @foreach (var store in FilteredToDos)
        {
            <a href="@($"stores/store/{store.Id}")" class="card col-3 m-3 p-0 shadow" style="text-decoration:none;">

                <div>
                    <img class="card-img-top" src="" onerror="this.src = '/Images/store.jpg';" alt="Store image cap" />
                    <div class="card-body">
                        <h5 class="card-title text-dark">@store.Name</h5>
                        <p class="card-text"><small class="text-muted">@store.Country</small></p>
                        <p class="card-text"><small class="text-muted">@store.Type</small></p>
                    </div>
                </div>

            </a>
        }
    }

</div>
@code
{
    public string SearchTerm { get; set; } = "";
    public string selectedFilter = "Store";
    public IEnumerable<StoreDTO> Stores { get; set; }
    public IEnumerable<StoreDTO> FilteredToDos { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Stores = await Store.getAllStores();
        FilteredToDos = Stores;

    }
    public async Task searchResults()
    {
        if (selectedFilter == "Store")
        {
            FilteredToDos = Stores.Where(i => i.Name.ToLower().Contains(SearchTerm.ToLower())).ToList();
        }
        else if (selectedFilter == "Product")
        {
            if (SearchTerm == "")
            {
                FilteredToDos = Stores;
            }
            else
            {
                FilteredToDos = await Store.SearchStoreByProductName(SearchTerm);
            }
        }
        else if (selectedFilter == "Category")
        {
            if (SearchTerm == "")
            {
                FilteredToDos = Stores;
            }
            else
            {
                FilteredToDos = await Store.SearchStoreByCategory(SearchTerm);
            }
        }
        else if (selectedFilter == "All")
        {
            if (SearchTerm == "")
            {
                FilteredToDos = Stores;
            }
            else
            {
                FilteredToDos = await Store.getStoresByAllFilters(SearchTerm);
            }
        }
    }
}
